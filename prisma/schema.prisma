// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  coverImage       String?
  bio              String?
  location         String?
  website          String?
  birthDate        DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  accounts         Account[]
  sessions         Session[]
  posts            Post[]
  comments         Comment[]
  likes            Like[]
  friendships      Friendship[] @relation("UserFriendships")
  friendRequests   Friendship[] @relation("UserFriendRequests")
  notifications    Notification[]
  
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String   @id @default(cuid())
  content   String
  image     String?
  video     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  Comment[]
  likes     Like[]
  
  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@unique([userId, postId])
  @@map("likes")
}

model Friendship {
  id        String   @id @default(cuid())
  status    String   // 'pending', 'accepted', 'blocked'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  requesterId String
  requester   User     @relation("UserFriendships", fields: [requesterId], references: [id], onDelete: Cascade)
  addresseeId String
  addressee   User     @relation("UserFriendRequests", fields: [addresseeId], references: [id], onDelete: Cascade)
  
  @@unique([requesterId, addresseeId])
  @@map("friendships")
}

model Notification {
  id        String   @id @default(cuid())
  type      String   // 'like', 'comment', 'friend_request', 'friend_accept'
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Optional references for different notification types
  postId    String?
  fromUserId String?
  
  @@map("notifications")
}